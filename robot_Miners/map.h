#ifndef MAP_H
#define MAP_H

#pragma once

#include <iostream>
#include <string>
#include <vector>
#include "windows.h"



class Robot;

struct Map
{
public:

    std::string prohibited = "EWR";
    std::string moveAble = "*";
    std::vector<std::vector<std::string>> map_table = {
        {"G","G","G","E","G","G","G","G","G","G",  "G","G","G","G","G","G","G","G","G","G",  "G","G","G","G","G","G","G","G","G","G"},
        {"G","G","G","E","G","G","G","G","G","G",  "G","G","G","G","G","G","G","G","G","G",  "G","G","G","G","G","G","G","G","G","G"},
        {"G","G","G","E","G","G","G","G","G","G",  "G","G","G","G","G","G","G","G","G","G",  "G","G","G","G","E","G","G","G","G","G"},
        {"G","G","G","E","G","G","G","G","G","G",  "G","G","G","G","G","G","G","G","G","G",  "G","G","G","G","E","G","G","G","G","G"},
        {"E","E","G","E","G","G","G","G","G","G",  "G","E","G","G","G","G","G","G","G","G",  "G","G","G","E","E","E","G","G","G","G"},
        {"E","G","G","G","G","G","G","G","G","G",  "G","E","G","G","G","G","G","G","G","G",  "G","G","G","E","E","E","G","G","G","G"},
        {"G","E","E","E","G","G","G","G","G","G",  "G","E","E","E","E","E","G","G","G","G",  "G","G","G","G","G","E","G","G","G","G"},
        {"G","G","G","G","E","G","G","G","G","G",  "G","E","G","G","G","E","E","G","G","G",  "G","G","G","G","G","E","G","G","G","G"},
        {"G","G","G","G","E","G","G","G","G","G",  "G","E","G","G","G","G","G","G","G","G",  "G","G","G","G","G","E","G","G","G","G"},
        {"G","G","G","G","E","E","E","G","G","G",  "G","E","G","G","G","G","G","G","G","G",  "G","G","G","G","G","E","E","G","G","G"},

        {"G","G","G","G","E","G","E","G","G","G",  "G","E","G","G","G","G","G","G","G","G",  "G","G","G","G","G","E","E","G","G","G"},
        {"G","G","G","E","G","G","G","G","G","E",  "E","E","G","G","G","G","G","G","G","G",  "G","G","G","G","G","E","G","G","G","G"},
        {"G","G","G","E","G","G","G","G","G","G",  "G","G","G","G","G","G","G","G","G","G",  "G","G","G","G","E","E","G","G","G","G"},
        {"G","E","E","E","G","G","G","G","G","G",  "G","G","G","G","G","G","G","G","G","G",  "G","G","G","G","E","G","G","G","G","G"},
        {"G","G","G","E","E","E","G","G","G","G",  "G","G","G","G","G","G","E","G","G","G",  "G","G","G","G","E","G","G","G","G","G"},
        {"G","G","G","E","G","E","G","G","E","G",  "G","G","G","G","G","G","E","G","G","G",  "G","G","G","E","E","G","G","G","G","G"},
        {"G","G","G","E","G","E","E","E","G","G",  "G","G","G","G","G","G","E","G","G","G",  "G","G","G","G","G","G","G","G","G","G"},
        {"G","G","G","E","G","G","G","G","G","G",  "G","G","G","G","G","G","E","E","G","G",  "G","G","G","G","G","G","G","G","G","E"},
        {"G","G","G","E","E","G","G","G","G","G",  "G","G","G","G","G","E","E","E","E","G",  "G","G","G","G","G","G","G","G","G","E"},
        {"G","G","G","E","E","E","G","G","G","G",  "G","G","G","G","G","E","E","E","G","G",  "G","G","G","G","G","G","G","G","E","E"},

        {"G","G","G","G","E","E","E","G","G","G",  "G","G","G","G","G","E","E","E","G","G",  "G","G","G","G","G","G","G","G","E","E"},
        {"G","G","G","G","G","E","E","E","E","E",  "G","G","G","G","G","G","E","E","G","G",  "G","G","G","G","G","G","G","G","E","E"},
        {"G","G","G","G","G","G","G","G","E","E",  "E","E","G","G","G","G","E","E","G","G",  "G","G","G","G","G","G","G","G","E","E"},
        {"G","G","G","G","G","G","G","G","G","G",  "G","G","G","G","G","G","E","G","G","G",  "G","G","G","G","G","G","G","G","E","E"},
        {"G","G","G","G","G","G","G","G","G","G",  "G","G","G","G","G","G","G","G","G","G",  "G","G","G","G","G","G","G","G","G","E"},
        {"G","G","G","G","G","G","G","G","G","G",  "G","G","G","G","G","G","G","G","G","G",  "G","G","G","G","G","G","G","G","G","G"},
        {"G","G","G","E","E","E","G","G","G","G",  "G","G","G","G","G","G","G","G","G","G",  "G","G","G","E","G","G","G","G","G","G"},
        {"G","G","G","E","E","E","E","E","E","G",  "G","G","G","G","G","G","G","G","G","G",  "G","G","E","E","E","G","G","G","G","G"},


    };
    int height = map_table.size();
    int width = map_table[0].size();

public:
    void update(Robot* r); // робот должен как-то возращать клетку на место, с которой сделал шаг
    void placeRobot(Robot* r);
    void printMap();
};

#endif // MAP_H
